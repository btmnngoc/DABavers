from views.components import render_financial_health, render_stock_movement, render_sector_indicators
import streamlit as st
csv_path = "B·∫£n sao 6.5 (his) financialreport_metrics_Nh√≥m ng√†nh_C√¥ng ngh·ªá th√¥ng tin (of FPT_CMG)_processed.csv"

def handle_analysis_menu(data):
    analysis_type = st.sidebar.radio("LO·∫†I PH√ÇN T√çCH", [
        "T·ªïng quan", 
        "S·ª©c kh·ªèe t√†i ch√≠nh doanh nghi·ªáp", 
        "Bi·∫øn ƒë·ªông c·ªï phi·∫øu doanh nghi·ªáp"
    ])

    if analysis_type == "T·ªïng quan":
        render_sector_indicators(csv_path)
    elif analysis_type == "S·ª©c kh·ªèe t√†i ch√≠nh doanh nghi·ªáp":
        stock = st.sidebar.radio("CH·ªåN M√É", ["FPT", "CMG"])
        render_financial_health(data, stock)
    elif analysis_type == "Bi·∫øn ƒë·ªông c·ªï phi·∫øu doanh nghi·ªáp":
        stock = st.sidebar.radio("CH·ªåN M√É", ["FPT", "CMG"])
        render_stock_movement(data, stock)


import streamlit as st
import seaborn as sns
import matplotlib.pyplot as plt
import re
from data.loader import load_financial_long_df

indicator_groups = {
    'Kh·∫£ nƒÉng sinh l·ªùi': [
        'T·ª∑ su·∫•t sinh l·ª£i tr√™n t·ªïng t√†i s·∫£n b√¨nh qu√¢n (ROAA)\n%',
        'T·ª∑ su·∫•t l·ª£i nhu·∫≠n tr√™n v·ªën ch·ªß s·ªü h·ªØu b√¨nh qu√¢n (ROEA)\n%',
        'T·ª∑ su·∫•t l·ª£i nhu·∫≠n g·ªôp bi√™n\n%',
        'T·ª∑ su·∫•t sinh l·ª£i tr√™n doanh thu thu·∫ßn\n%'
    ],
    'Kh·∫£ nƒÉng thanh to√°n': [
        'T·ª∑ s·ªë thanh to√°n hi·ªán h√†nh (ng·∫Øn h·∫°n)\nL·∫ßn',
        'T·ª∑ s·ªë thanh to√°n nhanh\nL·∫ßn',
        'T·ª∑ s·ªë thanh to√°n b·∫±ng ti·ªÅn m·∫∑t\nL·∫ßn'
    ],
    'ƒê√≤n b·∫©y t√†i ch√≠nh': [
        'T·ª∑ s·ªë N·ª£ tr√™n T·ªïng t√†i s·∫£n\n%',
        'T·ª∑ s·ªë N·ª£ tr√™n V·ªën ch·ªß s·ªü h·ªØu\n%'
    ],
    'Hi·ªáu qu·∫£ ho·∫°t ƒë·ªông': [
        'V√≤ng quay t·ªïng t√†i s·∫£n (Hi·ªáu su·∫•t s·ª≠ d·ª•ng to√†n b·ªô t√†i s·∫£n)\nV√≤ng',
        'V√≤ng quay h√†ng t·ªìn kho\nV√≤ng',
        'V√≤ng quay ph·∫£i thu kh√°ch h√†ng\nV√≤ng'
    ],
    'Ch·ªâ s·ªë th·ªã tr∆∞·ªùng': [
        'Ch·ªâ s·ªë gi√° th·ªã tr∆∞·ªùng tr√™n thu nh·∫≠p (P/E)\nL·∫ßn',
        'Ch·ªâ s·ªë gi√° th·ªã tr∆∞·ªùng tr√™n gi√° tr·ªã s·ªï s√°ch (P/B)\nL·∫ßn',
        'Beta\nL·∫ßn'
    ]
}

custom_palette = ['#004c97', '#f2a900', '#f45d01', '#7ec8e3']
sns.set_style("whitegrid")
sns.set_palette(sns.color_palette(custom_palette))

plt.rcParams.update({
    'figure.figsize': (14, 6),
    'axes.titlesize': 18,
    'axes.labelsize': 14,
    'xtick.labelsize': 11,
    'ytick.labelsize': 11,
    'legend.fontsize': 11,
    'font.family': 'DejaVu Sans',
    'lines.linewidth': 2.5,
    'lines.markersize': 8
})

def extract_unit(indicator_list):
    units = set()
    for ind in indicator_list:
        match = re.search(r'\n(.+)', ind)
        if match:
            units.add(match.group(1))
    return ', '.join(units) if units else ''

def show_financial_analysis():
    df_long = load_financial_long_df()

    st.subheader("üìä Ph√¢n t√≠ch theo nh√≥m ch·ªâ s·ªë t√†i ch√≠nh")
    selected_group = st.selectbox("Ch·ªçn nh√≥m ch·ªâ s·ªë", list(indicator_groups.keys()))
    indicators = indicator_groups[selected_group]

    sub = df_long[df_long['Indicator'].isin(indicators)]

    if sub.empty:
        st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu cho nh√≥m n√†y.")
        return

    pivot_df = sub.pivot(index='Period', columns='Indicator', values='Value')
    pivot_df.columns = [i.split('\n')[0] for i in pivot_df.columns]
    st.dataframe(pivot_df.style.format("{:.2f}"), use_container_width=True)

    fig, ax = plt.subplots()
    for idx, indicator in enumerate(indicators):
        line_data = sub[sub['Indicator'] == indicator]
        if not line_data.empty:
            sns.lineplot(
                data=line_data,
                x='Period',
                y='Value',
                label=indicator.split('\n')[0],
                color=custom_palette[idx % len(custom_palette)],
                marker='o',
                ax=ax
            )

    ax.set_title(selected_group, loc='center', fontweight='bold')
    ax.set_xlabel("K·ª≥ b√°o c√°o")
    ax.set_ylabel(f"Gi√° tr·ªã ({extract_unit(indicators)})")
    ax.tick_params(axis='x', rotation=45)
    ax.grid(True, linestyle='--', alpha=0.4)
    ax.legend(title='Ch·ªâ s·ªë', loc='upper left')
    st.pyplot(fig)
